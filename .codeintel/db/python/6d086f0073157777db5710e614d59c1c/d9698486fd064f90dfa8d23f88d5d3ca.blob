<scope doc="Extensions to the 'distutils' for large or complex&#10;distributions" ilk="blob" lang="Python" name="__init__" src="D:\Program Files (x86)\Python\lib\site-packages\setuptools\__init__.py"><import line="3" module="os" /><import line="4" module="functools" /><import line="5" module="distutils.core" /><import line="6" module="distutils.filelist" /><import line="7" module="distutils.util" symbol="convert_path" /><import line="8" module="fnmatch" symbol="fnmatchcase" /><import line="10" module="setuptools.extern.six.moves" symbol="filter" /><import line="10" module="setuptools.extern.six.moves" symbol="map" /><import line="12" module="setuptools.version" /><import line="13" module="setuptools.extension" symbol="Extension" /><import line="14" module="setuptools.dist" symbol="Distribution" /><import line="14" module="setuptools.dist" symbol="Feature" /><import line="15" module="setuptools.depends" symbol="Require" /><import line="16" module="." symbol="monkey" /><variable citdl="list" line="18" name="__all__" /><variable citdl="setuptools.version.__version__" line="23" name="__version__" /><variable line="25" name="bootstrap_install_from" /><variable citdl="True" line="29" name="run_2to3_on_doctests" /><variable citdl="list" line="31" name="lib2to3_fixer_packages" /><scope classrefs="object" doc="Generate a list of all Python packages found within a directory" ilk="class" line="34" lineend="95" name="PackageFinder"><scope attributes="__classmethod__" doc="Return a list all Python packages found within directory 'where'&#10;&#10;'where' is the root directory which will be searched for packages.  It&#10;should be supplied as a &quot;cross-platform&quot; (i.e. URL-style) path; it will&#10;be converted to the appropriate local path syntax.&#10;&#10;'exclude' is a sequence of package names to exclude; '*' can be used&#10;as a wildcard in the names, such that 'foo.*' will exclude all&#10;subpackages of 'foo' (but not 'foo' itself).&#10;&#10;'include' is a sequence of package names to include.  If it's&#10;specified, only the named packages will be included.  If it's not&#10;specified, all found packages will be included.  'include' can contain&#10;shell style wildcard patterns just like 'exclude'." ilk="function" line="39" lineend="39" name="find" returns="list()" signature="find(where='.', exclude=(), include=('*')) - classmethod"><variable citdl="PackageFinder" ilk="argument" line="39" name="cls" /><variable citdl="str" ilk="argument" line="39" name="where" /><variable citdl="tuple" ilk="argument" line="39" name="exclude" /><variable citdl="tuple" ilk="argument" line="39" name="include" /></scope><scope attributes="protected __classmethod__" doc="All the packages found in 'where' that pass the 'include' filter, but&#10;not the 'exclude' filter." ilk="function" line="62" lineend="62" name="_find_packages_iter" signature="_find_packages_iter(where, exclude, include) - classmethod"><variable citdl="PackageFinder" ilk="argument" line="62" name="cls" /><variable ilk="argument" line="62" name="where" /><variable ilk="argument" line="62" name="exclude" /><variable ilk="argument" line="62" name="include" /><variable line="68" name="files" /><variable line="68" name="dirs" /><variable line="68" name="root" /><variable line="70" name="all_dirs" /><variable line="73" name="dir" /><variable citdl="os.path.join()" line="74" name="full_path" /><variable citdl="os.path.relpath()" line="75" name="rel_path" /><variable citdl="rel_path.replace()" line="76" name="package" /></scope><scope attributes="protected __staticmethod__" doc="Does a directory look like a package?" ilk="function" line="90" lineend="90" name="_looks_like_package" returns="os.path.isfile()" signature="_looks_like_package(path) - staticmethod"><variable citdl="PackageFinder" ilk="argument" line="90" name="path" /></scope><scope attributes="protected __staticmethod__" doc="Given a list of patterns, return a callable that will be true only if&#10;the input matches at least one of the patterns." ilk="function" line="95" lineend="95" name="_build_filter" signature="_build_filter() - staticmethod" /></scope><scope classrefs="PackageFinder" ilk="class" line="104" lineend="105" name="PEP420PackageFinder"><scope attributes="protected __staticmethod__" ilk="function" line="105" lineend="105" name="_looks_like_package" returns="bool" signature="_looks_like_package(path) - staticmethod"><variable citdl="PEP420PackageFinder" ilk="argument" line="105" name="path" /></scope></scope><variable citdl="PackageFinder.find" line="110" name="find_packages" /><scope attributes="protected" ilk="function" line="113" lineend="123" name="_install_setup_requires" signature="_install_setup_requires(attrs)"><variable ilk="argument" line="113" name="attrs" /><variable citdl="distutils.core.Distribution()" line="116" name="dist" /></scope><scope ilk="function" line="126" lineend="129" name="setup" returns="distutils.core.setup()" signature="setup()"><variable citdl="distutils.core.setup.__doc__" line="131" name="__doc__" /></scope><variable attributes="protected" citdl="monkey.get_unpatched()" line="134" name="_Command" /><scope classrefs="monkey.get_unpatched()" ilk="class" line="137" lineend="153" name="Command"><variable citdl="_Command.__doc__" line="138" name="__doc__" /><variable citdl="False" line="140" name="command_consumes_arguments" /><scope attributes="__ctor__" doc="Construct the command for dist, updating&#10;vars(self) with any keyword parameters." ilk="function" line="142" lineend="148" name="__init__" signature="Command(**dist)"><variable citdl="Command" ilk="argument" line="142" name="self" /><variable attributes="kwargs" ilk="argument" line="142" name="dist" /></scope><scope ilk="function" line="150" lineend="153" name="reinitialize_command" returns="_Command.reinitialize_command()" signature="reinitialize_command(command=0, **reinit_subcommands)"><variable citdl="Command" ilk="argument" line="150" name="self" /><variable citdl="int" ilk="argument" line="150" name="command" /><variable attributes="kwargs" ilk="argument" line="150" name="reinit_subcommands" /><variable citdl="_Command.reinitialize_command()" line="151" name="cmd" /></scope></scope><scope attributes="protected" doc="Find all files under 'path'" ilk="function" line="156" lineend="165" name="_find_all_simple" returns="filter()" signature="_find_all_simple(path)"><variable ilk="argument" line="156" name="path" /><variable line="160" name="results" /></scope><scope doc="Find all files under 'dir' and return the list of full filenames.&#10;Unless dir is '.', return full filenames with dir prepended." ilk="function" line="168" lineend="177" name="findall" returns="list()" signature="findall(dir=os.curdir)"><variable citdl="os.curdir" ilk="argument" line="168" name="dir" /><variable citdl="_find_all_simple()" line="173" name="files" /><variable citdl="functools.partial()" line="175" name="make_rel" /></scope></scope>